"""Drop email & hashed_password

Revision ID: 4dbd59084b03
Revises: c65f0607867c
Create Date: 2025-04-24 13:23:12.762130

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4dbd59084b03'
down_revision: Union[str, None] = 'c65f0607867c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Brug direkte SQL med IF EXISTS for at undgå fejl
    op.execute("DROP INDEX IF EXISTS idx_payslips_date")
    op.execute("DROP INDEX IF EXISTS idx_payslips_user_id")
    
    # Tjek om indekset allerede eksisterer før vi opretter det
    op.execute("""
    DO $$ 
    BEGIN 
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'ix_payslips_id') THEN
            CREATE INDEX ix_payslips_id ON payslips (id);
        END IF;
    END $$;
    """)
    
    op.execute("DROP INDEX IF EXISTS idx_shifts_date")
    op.execute("DROP INDEX IF EXISTS idx_shifts_user_id")
    
    # Tjek om indekset allerede eksisterer før vi opretter det
    op.execute("""
    DO $$ 
    BEGIN 
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'ix_shifts_id') THEN
            CREATE INDEX ix_shifts_id ON shifts (id);
        END IF;
    END $$;
    """)
    
    op.execute("DROP INDEX IF EXISTS idx_users_email")
    op.execute("DROP INDEX IF EXISTS idx_users_username")
    
    # For constraints, vi skal være mere forsigtige
    # Vi kan tjekke om constraint eksisterer via PostgreSQL's information_schema
    op.execute("""
    DO $$ 
    BEGIN 
        IF EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'users_email_key') THEN
            ALTER TABLE users DROP CONSTRAINT users_email_key;
        END IF;
        
        IF EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'users_username_key') THEN
            ALTER TABLE users DROP CONSTRAINT users_username_key;
        END IF;
    END $$;
    """)
    
    # Tjek om indekserne allerede eksisterer før vi opretter dem
    op.execute("""
    DO $$ 
    BEGIN 
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'ix_users_email') THEN
            CREATE UNIQUE INDEX ix_users_email ON users (email);
        END IF;
        
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'ix_users_id') THEN
            CREATE INDEX ix_users_id ON users (id);
        END IF;
        
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'ix_users_username') THEN
            CREATE UNIQUE INDEX ix_users_username ON users (username);
        END IF;
    END $$;
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_username', 'users', ['username'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.drop_index(op.f('ix_shifts_id'), table_name='shifts')
    op.create_index('idx_shifts_user_id', 'shifts', ['user_id'], unique=False)
    op.create_index('idx_shifts_date', 'shifts', ['date'], unique=False)
    op.drop_index(op.f('ix_payslips_id'), table_name='payslips')
    op.create_index('idx_payslips_user_id', 'payslips', ['user_id'], unique=False)
    op.create_index('idx_payslips_date', 'payslips', ['date'], unique=False)
    # ### end Alembic commands ###
